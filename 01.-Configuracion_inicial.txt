# LA CONFIGURACION LOCAL ES SOLO PARA EL REPOSITORIO EN EL QUE ESTAS TRABAJANDO

# LA CONFIGURACION GLOBAL APLICA LA CONFIGURACION PARA TODOS LOS REPOSITORIOS DEL USUARIO DONDE LO APLICASTE

# LA CONFIGURACION DE SISTEMA ES PARA TODOS LOS USUARIOS DEL SISTEMA

# SIEMPRE DA PRIORIDAD AL MENOR ( A LO MAS ESPECIFICO )
1.- LOCAL
2.- GLOBAL
3.- SISTEMA


#################################################################
# CONFIGURACION INICIAL DE GIT
git config --global user.name "Nombre Usuario"
git config --global user.email "Email"

# CONFIGURACION PARA QUE INICIE CON LA RAMA MAIN
git config --global init.defaultBranch main

# VER CONFIGURACION GLOBAL EN UN EDITOR DE TEXTO
git config --global -e

# VER EL OUPUT DE LA CONFIGURACION GLOBAL
git config --global --list 
git config -l --global|local

# CONFIGURAR PARA AGREGAR EL EDITOR POR DEFECTO (LA PALABRA wait ESPERA A QUE TERMINES DE EDITAR, GUARDES Y CIERRES EL EDITOR PARA EFECTUAR LOS CAMBIOS. "code" ES LA PALABRA RESERVADA PARA REFERIRSE A VS CODE, CADA EDITOR TIENE SU PALABRA RESERVADA)
git config --global core.editor "code --wait"


# CONFIGURAR EL COLOREADO, DE ESTA FORMA LOS OUTPUT SERAN MAS COLORIDOS
git config --global color.ui true


# HACER COMPATIBLE LOS REPOSITORIOS QUE BAJAS DEPENDIENDO EL SO EN EL QUE TE ENCUENTRES POR LOS SALTOS DE LINEA(\n \r)

# WINDOWS, ESTO HACE QUE CUANDO SUBAMOS EL ARCHIVO AL SERVIDOR SACA LA \r Y CUANDO LO SUBAS Y LO DESCARGUE ALGUIEN DE LINUX SEA COMPATIBLE Y CUANDO LO DESCARGUES AUTOMATICAMENTE PONE LA \r
git config --global core.autocrlf true

# ESTO TODO LO CONVIERTE TODO A \n 
git config --global core.autocrlf input

# GIT IGNORE GLOBAL
git config --global core.excludesfile PATH/

# ABRIR UN FOLDER CON UN EDITOR DE TEXTO YA ABIERTO 
code --add <ruta-del-repositorio>

# DESCARGA SOLO EL ULTIMO COMMIT, ESTO AYUDA A QUE SU PESO SEA MENOR YA QUE NO TRAE TODO EL HISTORIAL DE CAMBIOS.
git clone REPOSITORY --depth=1

# SI ESTAS UTILIZANDO HTTPS PARA ACCEDER AL REPOSITORIO REMOTO Y QUIERES CAMBIAR SSH U VICEVERSA
git remote set-url origin git@github.com:Ocg1010/ansible-automatization-RH294.git
git remote set-url origin https://github.com/Ocg1010/ansible-automatization-RH294.git

# LIMPIAR CACHE DE CREDENCIALES
# ESTO LIMPIARA CUALQUIER CREDENCIAL ALAMACENADA EN CACHE Y TE PEDIRA QUE INGRESES TUS CREDNECIALES NUEVAMENTE LA PROXIMA VEZ QUE INTENTES ACCEDER AL REPOSITORIO.
git credential-cache exit

# ESTOS COMANDOS TE MOSTRARAN TU NOMBRE DE USUARIO Y DIRECCION DE CORREO ELECTRONICO CONFIGURADOS EN GIT
git config --global --get user.name
git config --global --get user.email

# SE UTULIZA PARA VER LAS REFERENCIAS DE UN REPOSITORIO REMOTO
git ls-remote

# PARA VERIFICAR LA URL DEL REPOSITORIO REMOTO LLAMADO "origin" 
git remote get-url origin
